# Generated by Django 4.2.11 on 2025-03-03 20:10

import accounts.utils
import common.utils
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_lifecycle.mixins
import phonenumber_field.modelfields
import sorl.thumbnail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('statictext', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('change_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('contact_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True)),
                ('is_contact_number_verified', models.BooleanField(default=False)),
                ('change_contact_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('is_username_updated', models.BooleanField(default=False)),
                ('is_author', models.BooleanField(default=False)),
                ('is_instructor', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('preferred_language', models.CharField(blank=True, choices=[('en', 'English'), ('hi', 'Hindi'), ('ml', 'Malayalam'), ('zh-cn', 'Simplified Chinese')], default='en', max_length=10)),
                ('is_2fa_enabled', models.BooleanField(default=False)),
                ('secret_2fa_key', models.CharField(blank=True, max_length=100, null=True)),
                ('slug', models.SlugField(max_length=100, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ContactInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('title', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('open', 'open'), ('in_progress', 'in progress'), ('resolved', 'resolved')], default='open', max_length=100)),
                ('comments', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Contact Log',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_image', sorl.thumbnail.fields.ImageField(blank=True, null=True, upload_to=common.utils.random_file_name)),
                ('height', models.FloatField(blank=True, max_length=100, null=True)),
                ('weight', models.FloatField(blank=True, max_length=100, null=True)),
                ('BMI', models.FloatField(blank=True, max_length=100, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.ForeignKey(blank=True, limit_choices_to={'drop_class__slug': 'gender'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gender', to='statictext.dropdown')),
                ('height_unit', models.ForeignKey(blank=True, limit_choices_to={'drop_class__slug': 'height-unit'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='height_unit', to='statictext.dropdown')),
                ('user', models.OneToOneField(help_text='One user is relate only with one profile.', on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
                ('weight_unit', models.ForeignKey(blank=True, limit_choices_to={'drop_class__slug': 'weight-unit'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='weight_unit', to='statictext.dropdown')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.PositiveIntegerField(default=accounts.utils.randint)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='otp', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_type', models.CharField(choices=[('pc', 'pc'), ('phone', 'phone'), ('tablet', 'tablet')], max_length=100)),
                ('access_type', models.CharField(choices=[('web', 'web'), ('app', 'app')], max_length=100)),
                ('device_brand', models.CharField(blank=True, max_length=100, null=True)),
                ('device_model', models.CharField(blank=True, max_length=100, null=True)),
                ('app_version', models.CharField(blank=True, max_length=100, null=True)),
                ('browser', models.CharField(blank=True, max_length=100, null=True)),
                ('device_os', models.CharField(max_length=100, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_device', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SupportRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('open', 'open'), ('in_progress', 'in progress'), ('resolved', 'resolved')], default='open', max_length=100)),
                ('comments', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(help_text='One user can have multiple support requests.', on_delete=django.db.models.deletion.CASCADE, related_name='support', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AuthorModel',
            fields=[
            ],
            options={
                'verbose_name': 'Author List',
                'verbose_name_plural': 'Authors List',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('accounts.user',),
        ),
    ]
